### 패키지 매니저
자바스크립트 런타임 환경인 노드(Node.js) 패키지 관리자
* 여기서 패키지는 노드 모듈(node_modules)을 지칭
* CLI를 통해 설치 및 삭제 그리고 버전 관리를 편리하게 할 수 있다.

npm 과 yarn
- npm : Node Package Manager
노드 패키지 매니저의 약자로 자바스크립트 언어를 위한 패키지 관리자

npm init : package.json 생성
npm install : package.json 파일 및 해당 종속성에 나열된 모든 모듈을 설치
npm install package_name@버전 : 특정 패키지의 특정 버전 설치
npm install 주소 : 특정 저장소 내 패키지 설치. 주로 github을 이와 같이 설치합니다.
npm install package_name -g : 옵션. 글로벌로 설치. 로컬의 다른 프로젝트도 이 패키지를 사용 가능하게 됩니다.
npm uninstall : 패키지 삭제 명령어입니다.
npm update : 설치한 패키지들을 업데이트해줍니다.
npm dedupe : 중복 설치된 패키지들을 정리해주는 명령어입니다.

- yarn : Yet Another Resource Negotiator
 페이스북에서 개발한 패키지 관리자, 리액트와 같은 프로젝트를 진행하며 보완된 패키지 관리자
* npm 레지스트리와 호환되면서 속도와 안정성은 npm보다 높음

yarn init : package.json 생성
yarn or yarn install : package.json 파일 및 해당 종속성에 나열된 모든 모듈을 설치
yarn add package_name@버전 : 특정 패키지의 특정 버전 설치
yarn add 주소 : 특정 저장소 내 패키지 설치. 주로 github을 이와 같이 설치합니다.
yarn global add package_name : 옵션. 글로벌로 설치. 로컬의 다른 프로젝트도 이 패키지를 사용 가능하게 됩니다.
yarn remove : 패키지 삭제 명령어입니다.
yarn upgrade : 설치한 패키지들을 업데이트해줍니다.
npm dedupe : 중복 설치된 패키지들을 정리해주는 명령어입니다.

#### npm vs yarn

1. 속도
- 차이가 거의 없음 (npm 5.0 버전 아래의 경우, yarn이 우세)
- 기존에 yarn이 우세했던 점은 yarn이 다운받은 패키지 데이터를 캐시(cache)에 저장하여 중복된 데이터를 다운로드하지 않고 저장된 파일을 활용했다는 점에 있어서이다.

2. 안정
- yarn이 유령의존성을 방지하기 위해 yarn.lock 혹은 package.json에 있는 파일만 설치

3. 사용 빈도
- npm이 패키지 관리자의 시작이기도 하며, 관련 커뮤니티도 많이 활성화되어 접근성이 좋다.

4. 환경
- yarn 명령을 통해 패키지가 설치될때, 비교적 로그가 깨끗하고, 시각적으로 구별이 가능하고 간다하다.
- 또한 이해를 돕기 위해 트리 형식으로 정렬된다.

* zero install
- 앞서 캐시를 통해 이미 다운로드한 패키지를 새로 다운로드하지 않고 캐시된 파일을 불러온다는 언급이 있었는데 zero install이 그 개념이라고 볼 수 있다.
- 실제로 