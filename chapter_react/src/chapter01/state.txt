### 관리 복잡도로 인해 useState에서 useReducer로 state를 관리해보았다.

1. 전역 관리를 위해 context API를 활용
2. useReducer를 통해 케이스별 비즈니스 로직 처리
    - 케이스(생성, 수정, 삭제)
    - 현재는 생성 로직만 수행하게 구성
3. useData라는 커스텀훅을 통해 로직 실행에 대한 관심사 분리

결론 : 
useState로 관리하는 것보다 더 좋은 것은
동일한 연산을 해야하는 경우, useReducer는 케이스를 만들어
이전 초기값과 변경되는 값을 핸들링할 수 있다는 점과

새로운 상태를 반환하여 관리하는 것이라 기존 state에 직접 접근하지
않아도 된다는 점(? 어떤 것이 이로운지는 아직 잘 모르겠...)과

이게 제일 좋은 점인 것 같은데
dispatch의 고유한 역할인 reducer로 전달하는 기능의 변함이 없어
useCallback과 React.memo롤 함께 이용한다면 렌더링을 방지하는데
좋은 역할을 하는 것 같다.



