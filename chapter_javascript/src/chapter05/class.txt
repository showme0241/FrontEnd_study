### class 문법은 쉽게 말해 컨테이너 역할을 한다.
학습 의도 : class 문법을 통한 react-error-boundary를 해석하기 위해 학습한다.
- class 컨테이너 객체는 생성자 함수로 사용하는 경우이기 때문에 파스칼 케이스로 명명한다.
- constructor는 class 객체를 생성자 함수로 명명하였을 때, 생성자 함수 인자로 들어온 값을 매개변수로 취할 수 있는 함수이다.
- super 키워드는 상속을 받는 상위 클래스의 객체(생성자 함수 혹은 메서드)의 접근을 돕기 위한 함수이다.
    {
        super.name은 문법적 이론으로는 접근이 가능...
        
        하지만 super는 상위 클래스에 직접 할당된 인스턴스를 접근하는 것이 아니라...
        상위 클래스의 메서드나 생성자함수를 접근할 수 있게 설계되었다.
        
        this를 사용해도 상위 클래스의 인스턴스 속성에 접근할 수 있게된 이유는
        super를 통해 상위 클래스를 상속 받았기 때문에 자식 클래스 인스턴스에 해당 값이 저장된다 
    }
    

class React.Component {
    constructor(props) {
        // ""
    }

    get() {
        /* */
    {

    /* */
}

class ErrorBoundary extends React.Component {
    constructor (props) {
        super(props) // React.Component 접근 및 호출
        this.state = { hasError: false };
    }

    render() {
        if(this.state.hasError) {
            return <ErrorFallBack />
        }
    }

    // ErrorBoundary의 자식 컴포넌트
    // 부모 클래스인 React.Component에서 상속받은...props
    return this.props.children 
}

return <Random FallBackComponent={ErrorFallBack} />


### 실제 ErrorBoundary 학습은 React Chapter에서 다룰 예정이다.