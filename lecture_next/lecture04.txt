### nextJS ver13
1. 특정 컴포넌트만의 역할 부여
    - 정보를 전달하는 목적의 컴포넌트는 앞시간에서 다뤘던 것처럼 서버 컴포넌트를 사용하고,
      사용자와 상호작용이 되는 곳에서는 훅 함수를 사용하여 state를 관리해야 하기 때문에 "use client"를 파일 내부에 작성해두어야 한다.

    - 위와 다른 케이스, 즉, 정적인 페이지에서 특정한 영역만 상호작용이 되어야한다면
      관심사를 분리하여 클라이언트 컴포넌트 영역을 별도로 파일로 빼내고, 해당 컴포넌트에 'use client"를
      작성하여 다룬다.
      
      ex) useParams
          > 서버 컴포넌트에서 분리하여 별도의 파일 생성
          > 별도 파일 내에서 use client를 선언하여 클라이언트 컴포넌트 생성

2. CRUD를 다루며 사용한 훅함수
    - useState : 데이터 저장
    - useParams : id 경로값
    - useRouter : 네비게이션
        * useRouter를 nextJS에서 처음 사용해보았다.
          router 변수에 담아 보통 이용하며, 해당 함수에 내장된 메서드 중에 refresh()가 앞으로 많이 사용할 것 같다.
          이유는 refresh() 메서드가 reload() 메서드와 동일한 역할을 하기 때문이다.
          케이스는 상태값을 초기화시킬 때, 캐시 데이터를 초기화시킬 때 등등이며, 새로고침을 통해 신선한 값을 유지시키기 위함의 용도로 쓰이는 것 같다.
    - useEffect : 데이터 호출

3. 환경 변수 (Env Var)
    - 기본적으로 nextJS는 env 환경에서 생성된 값들은 보안을 위해 관리하는 용도가 대부분이기에
      클라이언트 컴포넌트에서는 사용하는 것이 불가능하다.

      서버 컴포넌트에서는 가능하지만 사용자와 상호작용하는 페이지(클라)에서는 env 보안키들이 위험 노출을
      기본적으로 제어하는 역할을 하고있다.
      
      [유일하게 클라 컴포넌트에서 환경변수를 다루는 방법]
      접두사 : NEXT_PUBLIC_*********

      클라이언트 컴포넌트에서 유일하게 환경변수를 다뤄 보안과 연관성은 떨어지지만 코드 작성을 용이하게 하고,
      해당값들이 어떻게 정의가 되어있는지 제3자도 확인할 수 있게 하는 방법은 접두사를 사용하는 것이다.
