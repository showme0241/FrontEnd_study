### 인증과 인가
Authentication => 사용자가 누구야
: 사용자가 누구인지 확인 하는 것

1) 로그인 요청 : 클라가 ID, PW를 입력하고 로그인 요청
2) 사용자 확인 : DB에 저장된 사용자의 비밀번호와 사용자가 입력한 비밀번호를 비교, 인증 여부 결정
3) 토큰 발급 : 비밀번호 일치 => 출입증 "토큰" 사용자에게 전송
4) 상태 유지 : ID, PW 대신 "토큰" 제시

Authorization => 너구나 통과야
: 사용자의 요청에 대해 권한을 확인하는 것

1) 데이터 요청 : 서버에 페이지 요청과 함께 토큰 제시
2) 토큰 검증 : 토큰 확인 후, 어떤 사용자가 요청했는지 식별, 접근 권한 부여
3) 인가 처리 : 사용자의 권한 확인 => 요청 승인

#### http : 서버 <-> 클라이언트 모델을 사용 <약속>
=> https "s" => "secure"

관련 수단 : 쿠키, 세션, 토큰

#### 쿠키와 세션
공통점 : 클라이언트 정보의 상태를 유지
차이점 : 저장 위치 (쿠키 : 로컬 / 세션 : 서버)

#### 세션과 토큰
세션 : 
1) 브라우저 하나당 하나의 세션이 생성
2) 해당 브라우저의 요청은 모두 동일한 세션 ID로 식별
3) 라우팅 => 로그인 상태 유지
4) 서버 관리로 안전한 상태 유지 가능
5) 브라우저 종료시, 자동으로 삭제
6) 4번 내용처럼 서버 저장 및 관리로 트래픽 부하 가능성
7) 트래픽 부하로 인한 속도 느림

세션 프로세스
1) 페이지 요청시, 쿠키 정보와 함께 세션ID를 보냄
2) 서버 : 쿠키에서 세션 ID 여부 확인
3) 상태 유지 혹은 세션 ID 생성 후, DB 저장
4) 쿠키에 생성한 세션ID 정보를 넣어 응답
5) 해당 쿠키는 로컬에 저장
6) 이후 사용자의 요청은 세션id가 포함된 쿠키를 보유하고 활동

토큰 : 
1) 사용자의 인증 정보 암호화 (출입증)
2) 로그인시, 사용자에게 발급
3) 사용자는 header에 토큰을 가지고 활동

토큰 프로세스
1) 사용자의 로그인 === 토큰 발급
2) 토큰을 로컬에 저장
3) 이후 활동을 위해 토큰을 서버에 전송
4) 서버는 토큰 정보 검증 후, 권한 확인
5) 사용자의 인가 요청 승인